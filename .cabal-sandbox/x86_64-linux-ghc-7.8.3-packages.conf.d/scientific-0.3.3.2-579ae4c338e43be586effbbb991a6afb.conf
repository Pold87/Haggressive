name: scientific
version: 0.3.3.2
id: scientific-0.3.3.2-579ae4c338e43be586effbbb991a6afb
license: BSD3
copyright:
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
stability:
homepage: https://github.com/basvandijk/scientific
package-url:
synopsis: Numbers represented using scientific notation
description: @Data.Scientific@ provides a space efficient and arbitrary precision
             scientific number type.
             .
             'Scientific' numbers are represented using
             <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>. It
             uses a coefficient @c :: 'Integer'@ and a base-10 exponent @e :: 'Int'@ (do
             note that since we're using an 'Int' to represent the exponent these numbers
             aren't truly arbitrary precision). A scientific number corresponds to the
             'Fractional' number: @'fromInteger' c * 10 '^^' e@.
             .
             The main application of 'Scientific' is to be used as the target of parsing
             arbitrary precision numbers coming from an untrusted source. The advantages
             over using 'Rational' for this are that:
             .
             * A 'Scientific' is more efficient to construct. Rational numbers need to be
             constructed using '%' which has to compute the 'gcd' of the 'numerator' and
             'denominator'.
             .
             * 'Scientific' is safe against numbers with huge exponents. For example:
             @1e1000000000 :: 'Rational'@ will fill up all space and crash your
             program. Scientific works as expected:
             .
             > > read "1e1000000000" :: Scientific
             > 1.0e1000000000
             .
             * Also, the space usage of converting scientific numbers with huge exponents to
             @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
             will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules: Data.Scientific Data.Text.Lazy.Builder.Scientific
                 Data.ByteString.Builder.Scientific
hidden-modules: Math.NumberTheory.Logarithms
trusted: False
import-dirs: /home/pold/Dropbox/Uni/Radboud/Text_Mining/Haggressive/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.3/scientific-0.3.3.2
library-dirs: /home/pold/Dropbox/Uni/Radboud/Text_Mining/Haggressive/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.3/scientific-0.3.3.2
hs-libraries: HSscientific-0.3.3.2
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.5.0.0-98aa445e59f3eb0c886795ff07406d84
         base-4.7.0.1-e4b74d27ad8c8987c63abc42a80e7335
         bytestring-0.10.4.0-9f46be651278ecf2e2b21a220bfff6bf
         deepseq-1.3.0.2-733fe43e121f761739636bd6670bea77
         ghc-prim-0.3.1.0-954cb57749cf319beafdc89b3415422c
         hashable-1.2.2.0-ad662458cc9782e2c8923d91c8abb5f8
         integer-gmp-0.5.1.0-d42e6a7874a019e6a0d1c7305ebc83c4
         text-1.2.0.0-ffab9bda69053aae90caff0c3f8721f6
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/pold/Dropbox/Uni/Radboud/Text_Mining/Haggressive/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.3/scientific-0.3.3.2/html/scientific.haddock
haddock-html: /home/pold/Dropbox/Uni/Radboud/Text_Mining/Haggressive/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.3/scientific-0.3.3.2/html
